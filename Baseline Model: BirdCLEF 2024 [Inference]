{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":19596,"databundleVersionId":1292430,"sourceType":"competition"},{"sourceId":25954,"databundleVersionId":2091745,"sourceType":"competition"},{"sourceId":33246,"databundleVersionId":3221581,"sourceType":"competition"},{"sourceId":44224,"databundleVersionId":5188730,"sourceType":"competition"},{"sourceId":70203,"databundleVersionId":8068726,"sourceType":"competition"},{"sourceId":1487019,"sourceType":"datasetVersion","datasetId":726237},{"sourceId":1487116,"sourceType":"datasetVersion","datasetId":726312},{"sourceId":1664376,"sourceType":"datasetVersion","datasetId":985270},{"sourceId":5181249,"sourceType":"datasetVersion","datasetId":3012199},{"sourceId":5195317,"sourceType":"datasetVersion","datasetId":3020983},{"sourceId":174467364,"sourceType":"kernelVersion"},{"sourceId":6127,"sourceType":"modelInstanceVersion","modelInstanceId":4598}],"dockerImageVersionId":30683,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Package imports","metadata":{}},{"cell_type":"code","source":"import os\nos.environ[\"KERAS_BACKEND\"] = \"jax\"  # \"jax\" or \"tensorflow\" or \"torch\" \n\nimport keras_cv\nimport keras\nimport keras.backend as K\n\ntry: import fastkaggle\nexcept ModuleNotFoundError:\n    !pip install -Uq fastkaggle\n\nfrom fastkaggle import *\n\n# WandB for experiment tracking\n# Import wandb library for logging and tracking experiments\nimport wandb\nfrom wandb.keras import WandbCallback\n\n# Try to get the API key from Kaggle secrets\ntry:\n    from kaggle_secrets import UserSecretsClient\n    user_secrets = UserSecretsClient()\n    api_key = user_secrets.get_secret(\"WANDB\")\n    # Login to wandb with the API key\n    wandb.login(key=api_key)\n    # Set anonymous mode to None\n    anonymous = None\nexcept:\n    # If Kaggle secrets are not available, set anonymous mode to 'must'\n    anonymous = 'must'\n    # Login to wandb anonymously and relogin if needed\n    wandb.login(anonymous=anonymous, relogin=True)\n    \n\nimport numpy as np\nimport pandas as pd\nimport sklearn\nimport librosa\nimport tensorflow as tf\nimport tensorflow_io as tfio\n\nfrom glob import glob\nfrom tqdm import tqdm\n\nimport IPython.display as ipd\nimport librosa.display as lid\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\n\ncmap = mpl.cm.get_cmap(\"coolwarm\")","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.057571Z","iopub.execute_input":"2024-04-28T15:18:37.057996Z","iopub.status.idle":"2024-04-28T15:18:37.605711Z","shell.execute_reply.started":"2024-04-28T15:18:37.057964Z","shell.execute_reply":"2024-04-28T15:18:37.604464Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stderr","text":"\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n/tmp/ipykernel_33/3405063869.py:51: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n  cmap = mpl.cm.get_cmap(\"coolwarm\")\n","output_type":"stream"}]},{"cell_type":"code","source":"print('np:', np.__version__)\nprint('pd:', pd.__version__)\nprint('sklearn:', sklearn.__version__)\nprint('librosa:', librosa.__version__)\nprint('tf:', tf.__version__)\nprint('keras:', keras.__version__)\nprint('kerasCV:', keras_cv.__version__)\nprint('tfio:', tfio.__version__)\nprint('w&b:', wandb.__version__)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.607794Z","iopub.execute_input":"2024-04-28T15:18:37.608391Z","iopub.status.idle":"2024-04-28T15:18:37.616059Z","shell.execute_reply.started":"2024-04-28T15:18:37.608360Z","shell.execute_reply":"2024-04-28T15:18:37.614885Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"np: 1.26.4\npd: 2.2.1\nsklearn: 1.2.2\nlibrosa: 0.10.1\ntf: 2.15.0\nkeras: 3.1.1\nkerasCV: 0.8.2\ntfio: 0.35.0\nw&b: 0.16.5\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Data processing\n* Download dataset\n* Explore dataset\n* Convert audio files into Mel Spectrograms using librosa\n* Split data (?)","metadata":{}},{"cell_type":"code","source":"class CFG:\n    seed = 42\n    \n    # Input image size and batch size\n    img_size = [128, 384]\n    batch_size = 64\n    \n    # Audio duration, sample rate, and length\n    duration = 15 # second\n    sample_rate = 32000\n    audio_len = duration*sample_rate\n    \n    # STFT parameters\n    nfft = 2028\n    window = 2048\n    hop_length = audio_len // (img_size[1] - 1)\n    fmin = 20\n    fmax = 16000\n    \n    # Number of epochs, model name\n    preset = 'efficientnetv2_b2_imagenet'\n    \n    # Data augmentation parameters\n    augment=True\n\n    # Class Labels for BirdCLEF 24\n    class_names = sorted(os.listdir('/kaggle/input/birdclef-2024/train_audio/'))\n    num_classes = len(class_names)\n    class_labels = list(range(num_classes))\n    label2name = dict(zip(class_labels, class_names))\n    name2label = {v:k for k,v in label2name.items()}","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.617777Z","iopub.execute_input":"2024-04-28T15:18:37.618165Z","iopub.status.idle":"2024-04-28T15:18:37.636473Z","shell.execute_reply.started":"2024-04-28T15:18:37.618136Z","shell.execute_reply":"2024-04-28T15:18:37.635409Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"BASE_PATH0 = '/kaggle/input/birdsong-recognition'\nBASE_PATH1 = '/kaggle/input/birdclef-2021'\nBASE_PATH2 = '/kaggle/input/birdclef-2022'\nBASE_PATH3 = '/kaggle/input/birdclef-2023'\nBASE_PATH4 = '/kaggle/input/xeno-canto-bird-recordings-extended-a-m'\nBASE_PATH5 = '/kaggle/input/xeno-canto-bird-recordings-extended-n-z'\nBASE_PATH6 = '/kaggle/input/birdclef-2024'","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.638730Z","iopub.execute_input":"2024-04-28T15:18:37.639326Z","iopub.status.idle":"2024-04-28T15:18:37.643660Z","shell.execute_reply.started":"2024-04-28T15:18:37.639294Z","shell.execute_reply":"2024-04-28T15:18:37.642871Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"test_paths = glob(f'{BASE_PATH6}/test_soundscapes/*ogg')\nif len(test_paths) == 0:\n    test_paths = glob(f'{BASE_PATH6}/unlabeled_soundscapes/*ogg')[:10]\ntest_df = pd.DataFrame(test_paths, columns = ['filepath'])\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.644673Z","iopub.execute_input":"2024-04-28T15:18:37.645647Z","iopub.status.idle":"2024-04-28T15:18:37.684993Z","shell.execute_reply.started":"2024-04-28T15:18:37.645590Z","shell.execute_reply":"2024-04-28T15:18:37.683780Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"                                            filepath\n0  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n1  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n2  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n3  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n4  /kaggle/input/birdclef-2024/unlabeled_soundsca...","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>filepath</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"def load_audio(filepath):\n    audio, sr = librosa.load(filepath)\n    return audio, sr\n\ndef get_spectrogram(audio):\n    spec = librosa.feature.melspectrogram(y=audio, \n                                   sr=CFG.sample_rate, \n                                   n_mels=256,\n                                   n_fft=2048,\n                                   hop_length=512,\n                                   fmax=CFG.fmax,\n                                   fmin=CFG.fmin,\n                                   )\n    spec = librosa.power_to_db(spec, ref=1.0)\n    min_ = spec.min()\n    max_ = spec.max()\n    if max_ != min_:\n        spec = (spec - min_)/(max_ - min_)\n    return spec\n\ndef display_audio(row):\n    # Caption for viz\n    caption = f'Id: {row.filename} | Name: {row.common_name} | Sci.Name: {row.scientific_name} | Rating: {row.rating}'\n    # Read audio file\n    audio, sr = load_audio(row.filepath)\n    # Keep fixed length audio\n    audio = audio[:CFG.audio_len]\n    # Spectrogram from audio\n    spec = get_spectrogram(audio)\n    # Display audio\n    print(\"# Audio:\")\n    display(ipd.Audio(audio, rate=CFG.sample_rate))\n    print('# Visualization:')\n    fig, ax = plt.subplots(2, 1, figsize=(12, 2*3), sharex=True, tight_layout=True)\n    fig.suptitle(caption)\n    # Waveplot\n    lid.waveshow(audio,\n                 sr=CFG.sample_rate,\n                 ax=ax[0],\n                 color= cmap(0.1))\n    # Specplot\n    lid.specshow(spec, \n                 sr = CFG.sample_rate, \n                 hop_length=512,\n                 n_fft=2048,\n                 fmin=CFG.fmin,\n                 fmax=CFG.fmax,\n                 x_axis = 'time', \n                 y_axis = 'mel',\n                 cmap = 'coolwarm',\n                 ax=ax[1])\n    ax[0].set_xlabel('');\n    fig.show()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.686208Z","iopub.execute_input":"2024-04-28T15:18:37.686514Z","iopub.status.idle":"2024-04-28T15:18:37.699900Z","shell.execute_reply.started":"2024-04-28T15:18:37.686488Z","shell.execute_reply":"2024-04-28T15:18:37.698781Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"def build_decoder(dim=1024):\n    def get_audio(path):\n        # Function that gets the audio \n        file_bytes = tf.io.read_file(path)\n        audio = tfio.audio.decode_vorbis(file_bytes)\n        audio = tf.cast(audio, tf.float32)\n        if tf.shape(audio)[1] > 1:\n            audio = audio[...,0:1]\n        audio = tf.squeeze(audio, axis=-1)\n        return audio\n    def create_frames(audio, duration=5, sr=32000):\n        frame_size = int(duration * sr)\n        audio = tf.pad(audio[..., None], [[0, tf.shape(audio)[0] % frame_size], [0,0]])\n        audio = tf.squeeze(audio)\n        frames = tf.reshape(audio, [-1, frame_size])\n\n        return frames\n    def apply_preproc(spec):\n        mean = tf.math.reduce_mean(spec)\n        std = tf.math.reduce_std(spec)\n        spec = tf.where(tf.math.equal(std, 0), spec - mean, (spec - mean)/std)\n\n        min_val = tf.math.reduce_min(spec)\n        max_val = tf.math.reduce_max(spec)\n        spec = tf.where(tf.math.equal(max_val - min_val, 0), spec - min_val, (spec - min_val)/(max_val-min_val))\n        return spec\n    \n    def decode(path):\n        audio = get_audio(path)\n        audio = create_frames(audio)\n        spec = keras.layers.MelSpectrogram(num_mel_bins = CFG.img_size[0],\n                                          fft_length = CFG.nfft,\n                                          sequence_stride = CFG.hop_length,\n                                          sampling_rate = CFG.sample_rate)(audio)\n        spec = apply_preproc(spec)\n        spec = tf.tile(spec[..., None], [1,1,1, 3])\n        return spec\n\n    return decode","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.701559Z","iopub.execute_input":"2024-04-28T15:18:37.702108Z","iopub.status.idle":"2024-04-28T15:18:37.716150Z","shell.execute_reply.started":"2024-04-28T15:18:37.702060Z","shell.execute_reply":"2024-04-28T15:18:37.715051Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"def build_dataset(paths, batch_size = 1, decode_fn=None, cache=False):\n    if decode_fn is None:\n        decode_fn = build_decoder(dim = CFG.audio_len)\n\n    AUTO = tf.data.experimental.AUTOTUNE\n    slices = (paths, )\n    ds = tf.data.Dataset.from_tensor_slices(slices)\n    ds = ds.map(decode_fn, num_parallel_calls=AUTO)\n    ds = ds.cache() if cache else ds\n\n    ds = ds.batch(batch_size = batch_size, drop_remainder = True)\n    ds = ds.prefetch(AUTO)\n    return ds\n        ","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.717920Z","iopub.execute_input":"2024-04-28T15:18:37.718542Z","iopub.status.idle":"2024-04-28T15:18:37.730222Z","shell.execute_reply.started":"2024-04-28T15:18:37.718511Z","shell.execute_reply":"2024-04-28T15:18:37.728985Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"inp = keras.layers.Input(shape=(None, None, 3))\nbackbone = keras_cv.models.EfficientNetV2Backbone.from_preset(CFG.preset)\nout = keras_cv.models.ImageClassifier(\n    backbone= backbone,\n    num_classes = CFG.num_classes,\n    name = 'classifier')(inp)\nmodel = keras.models.Model(inputs = inp, outputs = out)\nmodel.load_weights(\"/kaggle/input/baseline-model-birdclef-2024-train/best_model.weights.h5\")\n\n","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:37.732076Z","iopub.execute_input":"2024-04-28T15:18:37.732483Z","iopub.status.idle":"2024-04-28T15:18:43.955760Z","shell.execute_reply.started":"2024-04-28T15:18:37.732445Z","shell.execute_reply":"2024-04-28T15:18:43.954583Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stderr","text":"Attaching 'config.json' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\nAttaching 'config.json' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\nAttaching 'model.weights.h5' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\n","output_type":"stream"}]},{"cell_type":"code","source":"ids = []\n\npreds = np.empty(shape=(0, CFG.num_classes), dtype = 'float32')\n\ntest_paths = test_df.filepath.tolist()\ntest_ds = build_dataset(paths=test_paths, batch_size=1)\n\nfor idx, specs in enumerate(tqdm(iter(test_ds), desc='test ', total=len(test_df))):\n    filename = test_paths[idx].split('/')[-1].replace('.ogg', '')\n    specs = keras.ops.convert_to_tensor(specs[0])\n    frame_preds = model.predict(specs, verbose = 0)\n    frame_ids = [f'{filename}_{(frame_id+1)*5}' for frame_id in range(len(frame_preds))]\n    \n    ids += frame_ids\n    \n    preds = np.concatenate([preds, frame_preds], axis=0)","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:18:43.959975Z","iopub.execute_input":"2024-04-28T15:18:43.960416Z","iopub.status.idle":"2024-04-28T15:20:20.781491Z","shell.execute_reply.started":"2024-04-28T15:18:43.960374Z","shell.execute_reply":"2024-04-28T15:20:20.780478Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stderr","text":"test : 100%|██████████| 10/10 [01:36<00:00,  9.62s/it]\n","output_type":"stream"}]},{"cell_type":"code","source":"pred_df = pd.DataFrame(ids, columns=['row_id'])\npred_df.loc[:, CFG.class_names] = preds\npred_df.to_csv('submission.csv', index=False)\npred_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-04-28T15:20:20.783322Z","iopub.execute_input":"2024-04-28T15:20:20.784423Z","iopub.status.idle":"2024-04-28T15:20:21.036329Z","shell.execute_reply.started":"2024-04-28T15:20:20.784372Z","shell.execute_reply":"2024-04-28T15:20:21.035090Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"          row_id    asbfly   ashdro1   ashpri1   ashwoo2   asikoe2   asiope1  \\\n0   1872382287_5  0.004888  0.020012  0.000201  0.001296  0.005234  0.000784   \n1  1872382287_10  0.005062  0.008706  0.000233  0.000834  0.004713  0.001073   \n2  1872382287_15  0.006374  0.037387  0.000162  0.000371  0.005338  0.000402   \n3  1872382287_20  0.007376  0.008998  0.000251  0.000539  0.002617  0.001366   \n4  1872382287_25  0.006283  0.002979  0.000208  0.000949  0.006196  0.001072   \n\n    aspfly1   aspswi1   barfly1  ...   whbwoo2   whcbar1   whiter2    whrmun  \\\n0  0.011128  0.000390  0.000343  ...  0.029768  0.000377  0.000417  0.002697   \n1  0.015683  0.000442  0.001653  ...  0.040331  0.000631  0.001719  0.001140   \n2  0.016170  0.000625  0.003979  ...  0.005152  0.000914  0.001052  0.006211   \n3  0.007882  0.000558  0.001933  ...  0.034073  0.000645  0.001835  0.002367   \n4  0.009079  0.000574  0.002480  ...  0.021620  0.000807  0.001991  0.001684   \n\n    whtkin2    woosan   wynlau1   yebbab1   yebbul3   zitcis1  \n0  0.002955  0.001876  0.000365  0.000160  0.004719  0.000262  \n1  0.002510  0.001193  0.001563  0.000684  0.006140  0.000687  \n2  0.001207  0.001299  0.001066  0.000874  0.003991  0.000307  \n3  0.001870  0.001112  0.001051  0.000590  0.003157  0.000512  \n4  0.002766  0.004483  0.000937  0.000766  0.003546  0.001083  \n\n[5 rows x 183 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>row_id</th>\n      <th>asbfly</th>\n      <th>ashdro1</th>\n      <th>ashpri1</th>\n      <th>ashwoo2</th>\n      <th>asikoe2</th>\n      <th>asiope1</th>\n      <th>aspfly1</th>\n      <th>aspswi1</th>\n      <th>barfly1</th>\n      <th>...</th>\n      <th>whbwoo2</th>\n      <th>whcbar1</th>\n      <th>whiter2</th>\n      <th>whrmun</th>\n      <th>whtkin2</th>\n      <th>woosan</th>\n      <th>wynlau1</th>\n      <th>yebbab1</th>\n      <th>yebbul3</th>\n      <th>zitcis1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1872382287_5</td>\n      <td>0.004888</td>\n      <td>0.020012</td>\n      <td>0.000201</td>\n      <td>0.001296</td>\n      <td>0.005234</td>\n      <td>0.000784</td>\n      <td>0.011128</td>\n      <td>0.000390</td>\n      <td>0.000343</td>\n      <td>...</td>\n      <td>0.029768</td>\n      <td>0.000377</td>\n      <td>0.000417</td>\n      <td>0.002697</td>\n      <td>0.002955</td>\n      <td>0.001876</td>\n      <td>0.000365</td>\n      <td>0.000160</td>\n      <td>0.004719</td>\n      <td>0.000262</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1872382287_10</td>\n      <td>0.005062</td>\n      <td>0.008706</td>\n      <td>0.000233</td>\n      <td>0.000834</td>\n      <td>0.004713</td>\n      <td>0.001073</td>\n      <td>0.015683</td>\n      <td>0.000442</td>\n      <td>0.001653</td>\n      <td>...</td>\n      <td>0.040331</td>\n      <td>0.000631</td>\n      <td>0.001719</td>\n      <td>0.001140</td>\n      <td>0.002510</td>\n      <td>0.001193</td>\n      <td>0.001563</td>\n      <td>0.000684</td>\n      <td>0.006140</td>\n      <td>0.000687</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1872382287_15</td>\n      <td>0.006374</td>\n      <td>0.037387</td>\n      <td>0.000162</td>\n      <td>0.000371</td>\n      <td>0.005338</td>\n      <td>0.000402</td>\n      <td>0.016170</td>\n      <td>0.000625</td>\n      <td>0.003979</td>\n      <td>...</td>\n      <td>0.005152</td>\n      <td>0.000914</td>\n      <td>0.001052</td>\n      <td>0.006211</td>\n      <td>0.001207</td>\n      <td>0.001299</td>\n      <td>0.001066</td>\n      <td>0.000874</td>\n      <td>0.003991</td>\n      <td>0.000307</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1872382287_20</td>\n      <td>0.007376</td>\n      <td>0.008998</td>\n      <td>0.000251</td>\n      <td>0.000539</td>\n      <td>0.002617</td>\n      <td>0.001366</td>\n      <td>0.007882</td>\n      <td>0.000558</td>\n      <td>0.001933</td>\n      <td>...</td>\n      <td>0.034073</td>\n      <td>0.000645</td>\n      <td>0.001835</td>\n      <td>0.002367</td>\n      <td>0.001870</td>\n      <td>0.001112</td>\n      <td>0.001051</td>\n      <td>0.000590</td>\n      <td>0.003157</td>\n      <td>0.000512</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1872382287_25</td>\n      <td>0.006283</td>\n      <td>0.002979</td>\n      <td>0.000208</td>\n      <td>0.000949</td>\n      <td>0.006196</td>\n      <td>0.001072</td>\n      <td>0.009079</td>\n      <td>0.000574</td>\n      <td>0.002480</td>\n      <td>...</td>\n      <td>0.021620</td>\n      <td>0.000807</td>\n      <td>0.001991</td>\n      <td>0.001684</td>\n      <td>0.002766</td>\n      <td>0.004483</td>\n      <td>0.000937</td>\n      <td>0.000766</td>\n      <td>0.003546</td>\n      <td>0.001083</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 183 columns</p>\n</div>"},"metadata":{}}]}]}