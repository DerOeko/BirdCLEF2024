{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2b20336",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:34:47.207226Z",
     "iopub.status.busy": "2024-05-05T09:34:47.206636Z",
     "iopub.status.idle": "2024-05-05T09:34:47.210769Z",
     "shell.execute_reply": "2024-05-05T09:34:47.210023Z"
    },
    "papermill": {
     "duration": 0.011422,
     "end_time": "2024-05-05T09:34:47.212593",
     "exception": false,
     "start_time": "2024-05-05T09:34:47.201171",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Package imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "27de9792",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:34:47.221720Z",
     "iopub.status.busy": "2024-05-05T09:34:47.221176Z",
     "iopub.status.idle": "2024-05-05T09:35:08.607233Z",
     "shell.execute_reply": "2024-05-05T09:35:08.606101Z"
    },
    "papermill": {
     "duration": 21.393312,
     "end_time": "2024-05-05T09:35:08.609721",
     "exception": false,
     "start_time": "2024-05-05T09:34:47.216409",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-05-05 09:34:52.681563: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-05-05 09:34:52.681783: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-05-05 09:34:52.849947: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "/tmp/ipykernel_18/196577055.py:25: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n",
      "  cmap = mpl.cm.get_cmap(\"coolwarm\")\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "os.environ[\"KERAS_BACKEND\"] = \"jax\"  # \"jax\" or \"tensorflow\" or \"torch\" \n",
    "\n",
    "import keras_cv\n",
    "import keras\n",
    "import keras.backend as K\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn\n",
    "import librosa\n",
    "import tensorflow as tf\n",
    "import tensorflow_io as tfio\n",
    "\n",
    "from glob import glob\n",
    "from tqdm import tqdm\n",
    "\n",
    "import IPython.display as ipd\n",
    "import librosa.display as lid\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "\n",
    "cmap = mpl.cm.get_cmap(\"coolwarm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e024c466",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:08.619287Z",
     "iopub.status.busy": "2024-05-05T09:35:08.618652Z",
     "iopub.status.idle": "2024-05-05T09:35:08.624956Z",
     "shell.execute_reply": "2024-05-05T09:35:08.623992Z"
    },
    "papermill": {
     "duration": 0.013887,
     "end_time": "2024-05-05T09:35:08.627477",
     "exception": false,
     "start_time": "2024-05-05T09:35:08.613590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "np: 1.26.4\n",
      "pd: 2.2.1\n",
      "sklearn: 1.2.2\n",
      "librosa: 0.10.1\n",
      "tf: 2.15.0\n",
      "keras: 3.1.1\n",
      "kerasCV: 0.8.2\n",
      "tfio: 0.35.0\n"
     ]
    }
   ],
   "source": [
    "print('np:', np.__version__)\n",
    "print('pd:', pd.__version__)\n",
    "print('sklearn:', sklearn.__version__)\n",
    "print('librosa:', librosa.__version__)\n",
    "print('tf:', tf.__version__)\n",
    "print('keras:', keras.__version__)\n",
    "print('kerasCV:', keras_cv.__version__)\n",
    "print('tfio:', tfio.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec361c3c",
   "metadata": {
    "papermill": {
     "duration": 0.003523,
     "end_time": "2024-05-05T09:35:08.635038",
     "exception": false,
     "start_time": "2024-05-05T09:35:08.631515",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data processing\n",
    "* Download dataset\n",
    "* Explore dataset\n",
    "* Convert audio files into Mel Spectrograms using librosa\n",
    "* Split data (?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2b2870bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:08.644159Z",
     "iopub.status.busy": "2024-05-05T09:35:08.643784Z",
     "iopub.status.idle": "2024-05-05T09:35:08.670953Z",
     "shell.execute_reply": "2024-05-05T09:35:08.669710Z"
    },
    "papermill": {
     "duration": 0.034914,
     "end_time": "2024-05-05T09:35:08.673626",
     "exception": false,
     "start_time": "2024-05-05T09:35:08.638712",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CFG:\n",
    "    seed = 42\n",
    "    \n",
    "    # Input image size and batch size\n",
    "    img_size = [128, 384]\n",
    "    \n",
    "    # Audio duration, sample rate, and length\n",
    "    duration = 15 # second\n",
    "    sample_rate = 32000\n",
    "    audio_len = duration*sample_rate\n",
    "    \n",
    "    # STFT parameters\n",
    "    nfft = 2028\n",
    "    window = 2048\n",
    "    hop_length = audio_len // (img_size[1] - 1)\n",
    "    fmin = 20\n",
    "    fmax = 16000\n",
    "    \n",
    "    # Number of epochs, model name\n",
    "    preset = 'efficientnetv2_b2_imagenet'\n",
    "\n",
    "\n",
    "    # Class Labels for BirdCLEF 24\n",
    "    class_names = sorted(os.listdir('/kaggle/input/birdclef-2024/train_audio'))\n",
    "    num_classes = len(class_names)\n",
    "    class_labels = list(range(num_classes))\n",
    "    label2name = dict(zip(class_labels, class_names))\n",
    "    name2label = {v:k for k,v in label2name.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "41bb102a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:08.683146Z",
     "iopub.status.busy": "2024-05-05T09:35:08.682751Z",
     "iopub.status.idle": "2024-05-05T09:35:08.687264Z",
     "shell.execute_reply": "2024-05-05T09:35:08.686286Z"
    },
    "papermill": {
     "duration": 0.011683,
     "end_time": "2024-05-05T09:35:08.689231",
     "exception": false,
     "start_time": "2024-05-05T09:35:08.677548",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "BASE_PATH0 = '/kaggle/input/birdsong-recognition'\n",
    "BASE_PATH1 = '/kaggle/input/birdclef-2021'\n",
    "BASE_PATH2 = '/kaggle/input/birdclef-2022'\n",
    "BASE_PATH3 = '/kaggle/input/birdclef-2023'\n",
    "BASE_PATH4 = '/kaggle/input/xeno-canto-bird-recordings-extended-a-m'\n",
    "BASE_PATH5 = '/kaggle/input/xeno-canto-bird-recordings-extended-n-z'\n",
    "BASE_PATH = '/kaggle/input/birdclef-2024'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ab06bc18",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:08.698606Z",
     "iopub.status.busy": "2024-05-05T09:35:08.698023Z",
     "iopub.status.idle": "2024-05-05T09:35:12.185741Z",
     "shell.execute_reply": "2024-05-05T09:35:12.184637Z"
    },
    "papermill": {
     "duration": 3.495091,
     "end_time": "2024-05-05T09:35:12.188246",
     "exception": false,
     "start_time": "2024-05-05T09:35:08.693155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filepath</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            filepath\n",
       "0  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "1  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "2  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "3  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "4  /kaggle/input/birdclef-2024/unlabeled_soundsca..."
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_paths = glob(f'{BASE_PATH}/test_soundscapes/*ogg')\n",
    "if len(test_paths) == 0:\n",
    "    test_paths = glob(f'{BASE_PATH}/unlabeled_soundscapes/*ogg')[:10]\n",
    "test_df = pd.DataFrame(test_paths, columns = ['filepath'])\n",
    "test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "01cb6356",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:12.197702Z",
     "iopub.status.busy": "2024-05-05T09:35:12.197360Z",
     "iopub.status.idle": "2024-05-05T09:35:33.894422Z",
     "shell.execute_reply": "2024-05-05T09:35:33.893253Z"
    },
    "papermill": {
     "duration": 21.705171,
     "end_time": "2024-05-05T09:35:33.897483",
     "exception": false,
     "start_time": "2024-05-05T09:35:12.192312",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Attaching 'config.json' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\n",
      "Attaching 'config.json' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\n",
      "Attaching 'model.weights.h5' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\n"
     ]
    }
   ],
   "source": [
    "inp = keras.layers.Input(shape=(None, None, 3))\n",
    "backbone = keras_cv.models.EfficientNetV2Backbone.from_preset(CFG.preset)\n",
    "out = keras_cv.models.ImageClassifier(\n",
    "    backbone= backbone,\n",
    "    num_classes = CFG.num_classes,\n",
    "    name = 'classifier')(inp)\n",
    "model = keras.models.Model(inputs = inp, outputs = out)\n",
    "model.load_weights(\"/kaggle/input/baseline-model-birdclef-2024-train/best_model.weights.h5\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d18cb21",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:33.907997Z",
     "iopub.status.busy": "2024-05-05T09:35:33.907583Z",
     "iopub.status.idle": "2024-05-05T09:35:33.919227Z",
     "shell.execute_reply": "2024-05-05T09:35:33.918057Z"
    },
    "papermill": {
     "duration": 0.019424,
     "end_time": "2024-05-05T09:35:33.921416",
     "exception": false,
     "start_time": "2024-05-05T09:35:33.901992",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def build_decoder(dim=1024):\n",
    "    def get_audio(path):\n",
    "        # Function that gets the audio \n",
    "        file_bytes = tf.io.read_file(path)\n",
    "        audio = tfio.audio.decode_vorbis(file_bytes)\n",
    "        audio = tf.cast(audio, tf.float32)\n",
    "        if tf.shape(audio)[1] > 1:\n",
    "            audio = audio[...,0:1]\n",
    "        audio = tf.squeeze(audio, axis=-1)\n",
    "        return audio\n",
    "    def create_frames(audio, duration=5, sr=32000):\n",
    "        frame_size = int(duration * sr)\n",
    "        audio = tf.pad(audio[..., None], [[0, tf.shape(audio)[0] % frame_size], [0,0]])\n",
    "        audio = tf.squeeze(audio)\n",
    "        frames = tf.reshape(audio, [-1, frame_size])\n",
    "\n",
    "        return frames\n",
    "    def apply_preproc(spec):\n",
    "        mean = tf.math.reduce_mean(spec)\n",
    "        std = tf.math.reduce_std(spec)\n",
    "        spec = tf.where(tf.math.equal(std, 0), spec - mean, (spec - mean)/std)\n",
    "\n",
    "        min_val = tf.math.reduce_min(spec)\n",
    "        max_val = tf.math.reduce_max(spec)\n",
    "        spec = tf.where(tf.math.equal(max_val - min_val, 0), spec - min_val, (spec - min_val)/(max_val-min_val))\n",
    "        return spec\n",
    "    \n",
    "    def decode(path):\n",
    "        audio = get_audio(path)\n",
    "        audio = create_frames(audio)\n",
    "        spec = keras.layers.MelSpectrogram(num_mel_bins = CFG.img_size[0],\n",
    "                                          fft_length = CFG.nfft,\n",
    "                                          sequence_stride = CFG.hop_length,\n",
    "                                          sampling_rate = CFG.sample_rate)(audio)\n",
    "        spec = apply_preproc(spec)\n",
    "        spec = tf.tile(spec[..., None], [1,1,1, 3])\n",
    "        return spec\n",
    "\n",
    "    return decode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "30cde375",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:33.931630Z",
     "iopub.status.busy": "2024-05-05T09:35:33.931274Z",
     "iopub.status.idle": "2024-05-05T09:35:33.937769Z",
     "shell.execute_reply": "2024-05-05T09:35:33.936660Z"
    },
    "papermill": {
     "duration": 0.014205,
     "end_time": "2024-05-05T09:35:33.939927",
     "exception": false,
     "start_time": "2024-05-05T09:35:33.925722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def build_dataset(paths, batch_size = 1, decode_fn=None, cache=False):\n",
    "    if decode_fn is None:\n",
    "        decode_fn = build_decoder(dim = CFG.audio_len)\n",
    "    AUTO = tf.data.experimental.AUTOTUNE\n",
    "    slices = (paths, )\n",
    "    ds = tf.data.Dataset.from_tensor_slices(slices)\n",
    "    ds = ds.map(decode_fn, num_parallel_calls=AUTO)\n",
    "    ds = ds.cache() if cache else ds\n",
    "    ds = ds.batch(batch_size = batch_size, drop_remainder = True)\n",
    "    ds = ds.prefetch(AUTO)\n",
    "    return ds\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6af71917",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:35:33.950214Z",
     "iopub.status.busy": "2024-05-05T09:35:33.949855Z",
     "iopub.status.idle": "2024-05-05T09:37:57.478957Z",
     "shell.execute_reply": "2024-05-05T09:37:57.477736Z"
    },
    "papermill": {
     "duration": 143.537202,
     "end_time": "2024-05-05T09:37:57.481568",
     "exception": false,
     "start_time": "2024-05-05T09:35:33.944366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test : 100%|██████████| 10/10 [01:36<00:00,  9.65s/it]\n"
     ]
    }
   ],
   "source": [
    "ids = []\n",
    "\n",
    "preds = np.empty(shape=(0, CFG.num_classes), dtype = 'float32')\n",
    "\n",
    "test_paths = test_df.filepath.tolist()\n",
    "test_ds = build_dataset(paths=test_paths, batch_size=1)\n",
    "\n",
    "for idx, specs in enumerate(tqdm(iter(test_ds), desc='test ', total=len(test_df))):\n",
    "    filename = test_paths[idx].split('/')[-1].replace('.ogg', '')\n",
    "    specs = keras.ops.convert_to_tensor(specs[0])\n",
    "    frame_preds = model.predict(specs, verbose = 0)\n",
    "    frame_ids = [f'{filename}_{(frame_id+1)*5}' for frame_id in range(len(frame_preds))]\n",
    "    \n",
    "    ids += frame_ids\n",
    "    \n",
    "    preds = np.concatenate([preds, frame_preds], axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "97c5338e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-05-05T09:37:57.494609Z",
     "iopub.status.busy": "2024-05-05T09:37:57.494232Z",
     "iopub.status.idle": "2024-05-05T09:37:57.728899Z",
     "shell.execute_reply": "2024-05-05T09:37:57.727861Z"
    },
    "papermill": {
     "duration": 0.242878,
     "end_time": "2024-05-05T09:37:57.730973",
     "exception": false,
     "start_time": "2024-05-05T09:37:57.488095",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>asbfly</th>\n",
       "      <th>ashdro1</th>\n",
       "      <th>ashpri1</th>\n",
       "      <th>ashwoo2</th>\n",
       "      <th>asikoe2</th>\n",
       "      <th>asiope1</th>\n",
       "      <th>aspfly1</th>\n",
       "      <th>aspswi1</th>\n",
       "      <th>barfly1</th>\n",
       "      <th>...</th>\n",
       "      <th>whbwoo2</th>\n",
       "      <th>whcbar1</th>\n",
       "      <th>whiter2</th>\n",
       "      <th>whrmun</th>\n",
       "      <th>whtkin2</th>\n",
       "      <th>woosan</th>\n",
       "      <th>wynlau1</th>\n",
       "      <th>yebbab1</th>\n",
       "      <th>yebbul3</th>\n",
       "      <th>zitcis1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1872382287_5</td>\n",
       "      <td>0.004641</td>\n",
       "      <td>0.001483</td>\n",
       "      <td>0.000611</td>\n",
       "      <td>0.001257</td>\n",
       "      <td>0.005665</td>\n",
       "      <td>0.000171</td>\n",
       "      <td>0.001986</td>\n",
       "      <td>0.000762</td>\n",
       "      <td>0.003039</td>\n",
       "      <td>...</td>\n",
       "      <td>0.019501</td>\n",
       "      <td>0.001897</td>\n",
       "      <td>0.001297</td>\n",
       "      <td>0.006376</td>\n",
       "      <td>0.002797</td>\n",
       "      <td>0.006027</td>\n",
       "      <td>0.000428</td>\n",
       "      <td>0.000210</td>\n",
       "      <td>0.001607</td>\n",
       "      <td>0.001566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1872382287_10</td>\n",
       "      <td>0.005361</td>\n",
       "      <td>0.010142</td>\n",
       "      <td>0.000674</td>\n",
       "      <td>0.001485</td>\n",
       "      <td>0.004555</td>\n",
       "      <td>0.000190</td>\n",
       "      <td>0.007647</td>\n",
       "      <td>0.000844</td>\n",
       "      <td>0.008572</td>\n",
       "      <td>...</td>\n",
       "      <td>0.013195</td>\n",
       "      <td>0.000641</td>\n",
       "      <td>0.003169</td>\n",
       "      <td>0.011248</td>\n",
       "      <td>0.026498</td>\n",
       "      <td>0.001707</td>\n",
       "      <td>0.002173</td>\n",
       "      <td>0.000262</td>\n",
       "      <td>0.002829</td>\n",
       "      <td>0.000705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1872382287_15</td>\n",
       "      <td>0.002470</td>\n",
       "      <td>0.004976</td>\n",
       "      <td>0.000533</td>\n",
       "      <td>0.000796</td>\n",
       "      <td>0.002969</td>\n",
       "      <td>0.000157</td>\n",
       "      <td>0.004767</td>\n",
       "      <td>0.001246</td>\n",
       "      <td>0.007315</td>\n",
       "      <td>...</td>\n",
       "      <td>0.023924</td>\n",
       "      <td>0.001861</td>\n",
       "      <td>0.001512</td>\n",
       "      <td>0.006253</td>\n",
       "      <td>0.003471</td>\n",
       "      <td>0.006346</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.000325</td>\n",
       "      <td>0.002299</td>\n",
       "      <td>0.001137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1872382287_20</td>\n",
       "      <td>0.003734</td>\n",
       "      <td>0.004889</td>\n",
       "      <td>0.000721</td>\n",
       "      <td>0.000625</td>\n",
       "      <td>0.002291</td>\n",
       "      <td>0.000164</td>\n",
       "      <td>0.002849</td>\n",
       "      <td>0.002283</td>\n",
       "      <td>0.008536</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010299</td>\n",
       "      <td>0.001308</td>\n",
       "      <td>0.003347</td>\n",
       "      <td>0.009318</td>\n",
       "      <td>0.005408</td>\n",
       "      <td>0.007144</td>\n",
       "      <td>0.001936</td>\n",
       "      <td>0.000734</td>\n",
       "      <td>0.001378</td>\n",
       "      <td>0.001426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1872382287_25</td>\n",
       "      <td>0.004535</td>\n",
       "      <td>0.000916</td>\n",
       "      <td>0.000435</td>\n",
       "      <td>0.000843</td>\n",
       "      <td>0.006686</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>0.002141</td>\n",
       "      <td>0.001126</td>\n",
       "      <td>0.005136</td>\n",
       "      <td>...</td>\n",
       "      <td>0.023138</td>\n",
       "      <td>0.002333</td>\n",
       "      <td>0.002404</td>\n",
       "      <td>0.003643</td>\n",
       "      <td>0.001753</td>\n",
       "      <td>0.011947</td>\n",
       "      <td>0.000620</td>\n",
       "      <td>0.000430</td>\n",
       "      <td>0.001559</td>\n",
       "      <td>0.001917</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 183 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          row_id    asbfly   ashdro1   ashpri1   ashwoo2   asikoe2   asiope1  \\\n",
       "0   1872382287_5  0.004641  0.001483  0.000611  0.001257  0.005665  0.000171   \n",
       "1  1872382287_10  0.005361  0.010142  0.000674  0.001485  0.004555  0.000190   \n",
       "2  1872382287_15  0.002470  0.004976  0.000533  0.000796  0.002969  0.000157   \n",
       "3  1872382287_20  0.003734  0.004889  0.000721  0.000625  0.002291  0.000164   \n",
       "4  1872382287_25  0.004535  0.000916  0.000435  0.000843  0.006686  0.000230   \n",
       "\n",
       "    aspfly1   aspswi1   barfly1  ...   whbwoo2   whcbar1   whiter2    whrmun  \\\n",
       "0  0.001986  0.000762  0.003039  ...  0.019501  0.001897  0.001297  0.006376   \n",
       "1  0.007647  0.000844  0.008572  ...  0.013195  0.000641  0.003169  0.011248   \n",
       "2  0.004767  0.001246  0.007315  ...  0.023924  0.001861  0.001512  0.006253   \n",
       "3  0.002849  0.002283  0.008536  ...  0.010299  0.001308  0.003347  0.009318   \n",
       "4  0.002141  0.001126  0.005136  ...  0.023138  0.002333  0.002404  0.003643   \n",
       "\n",
       "    whtkin2    woosan   wynlau1   yebbab1   yebbul3   zitcis1  \n",
       "0  0.002797  0.006027  0.000428  0.000210  0.001607  0.001566  \n",
       "1  0.026498  0.001707  0.002173  0.000262  0.002829  0.000705  \n",
       "2  0.003471  0.006346  0.001440  0.000325  0.002299  0.001137  \n",
       "3  0.005408  0.007144  0.001936  0.000734  0.001378  0.001426  \n",
       "4  0.001753  0.011947  0.000620  0.000430  0.001559  0.001917  \n",
       "\n",
       "[5 rows x 183 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_df = pd.DataFrame(ids, columns=['row_id'])\n",
    "pred_df.loc[:, CFG.class_names] = preds\n",
    "pred_df.to_csv('submission.csv', index=False)\n",
    "pred_df.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8068726,
     "sourceId": 70203,
     "sourceType": "competition"
    },
    {
     "sourceId": 175712895,
     "sourceType": "kernelVersion"
    },
    {
     "modelInstanceId": 4598,
     "sourceId": 6127,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30683,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 196.143968,
   "end_time": "2024-05-05T09:38:00.564367",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-05-05T09:34:44.420399",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
