{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "815461e9",
   "metadata": {
    "papermill": {
     "duration": 0.004217,
     "end_time": "2024-04-28T15:59:02.789462",
     "exception": false,
     "start_time": "2024-04-28T15:59:02.785245",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Package imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c9747f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:02.799493Z",
     "iopub.status.busy": "2024-04-28T15:59:02.798832Z",
     "iopub.status.idle": "2024-04-28T15:59:21.543386Z",
     "shell.execute_reply": "2024-04-28T15:59:21.541546Z"
    },
    "papermill": {
     "duration": 18.752229,
     "end_time": "2024-04-28T15:59:21.545674",
     "exception": false,
     "start_time": "2024-04-28T15:59:02.793445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-04-28 15:59:07.595139: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-04-28 15:59:07.595319: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-04-28 15:59:07.746158: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
      "/tmp/ipykernel_18/196577055.py:25: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n",
      "  cmap = mpl.cm.get_cmap(\"coolwarm\")\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "os.environ[\"KERAS_BACKEND\"] = \"jax\"  # \"jax\" or \"tensorflow\" or \"torch\" \n",
    "\n",
    "import keras_cv\n",
    "import keras\n",
    "import keras.backend as K\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import sklearn\n",
    "import librosa\n",
    "import tensorflow as tf\n",
    "import tensorflow_io as tfio\n",
    "\n",
    "from glob import glob\n",
    "from tqdm import tqdm\n",
    "\n",
    "import IPython.display as ipd\n",
    "import librosa.display as lid\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as mpl\n",
    "\n",
    "cmap = mpl.cm.get_cmap(\"coolwarm\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ecdbd10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.555200Z",
     "iopub.status.busy": "2024-04-28T15:59:21.554652Z",
     "iopub.status.idle": "2024-04-28T15:59:21.560691Z",
     "shell.execute_reply": "2024-04-28T15:59:21.559756Z"
    },
    "papermill": {
     "duration": 0.013327,
     "end_time": "2024-04-28T15:59:21.563012",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.549685",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "np: 1.26.4\n",
      "pd: 2.2.1\n",
      "sklearn: 1.2.2\n",
      "librosa: 0.10.1\n",
      "tf: 2.15.0\n",
      "keras: 3.1.1\n",
      "kerasCV: 0.8.2\n",
      "tfio: 0.35.0\n"
     ]
    }
   ],
   "source": [
    "print('np:', np.__version__)\n",
    "print('pd:', pd.__version__)\n",
    "print('sklearn:', sklearn.__version__)\n",
    "print('librosa:', librosa.__version__)\n",
    "print('tf:', tf.__version__)\n",
    "print('keras:', keras.__version__)\n",
    "print('kerasCV:', keras_cv.__version__)\n",
    "print('tfio:', tfio.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfee8108",
   "metadata": {
    "papermill": {
     "duration": 0.003807,
     "end_time": "2024-04-28T15:59:21.570823",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.567016",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data processing\n",
    "* Download dataset\n",
    "* Explore dataset\n",
    "* Convert audio files into Mel Spectrograms using librosa\n",
    "* Split data (?)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "afda88fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.579699Z",
     "iopub.status.busy": "2024-04-28T15:59:21.579396Z",
     "iopub.status.idle": "2024-04-28T15:59:21.595984Z",
     "shell.execute_reply": "2024-04-28T15:59:21.595255Z"
    },
    "papermill": {
     "duration": 0.023217,
     "end_time": "2024-04-28T15:59:21.597859",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.574642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class CFG:\n",
    "    seed = 42\n",
    "    \n",
    "    # Input image size and batch size\n",
    "    img_size = [128, 384]\n",
    "    batch_size = 64\n",
    "    \n",
    "    # Audio duration, sample rate, and length\n",
    "    duration = 15 # second\n",
    "    sample_rate = 32000\n",
    "    audio_len = duration*sample_rate\n",
    "    \n",
    "    # STFT parameters\n",
    "    nfft = 2028\n",
    "    window = 2048\n",
    "    hop_length = audio_len // (img_size[1] - 1)\n",
    "    fmin = 20\n",
    "    fmax = 16000\n",
    "    \n",
    "    # Number of epochs, model name\n",
    "    preset = 'efficientnetv2_b2_imagenet'\n",
    "\n",
    "\n",
    "    # Class Labels for BirdCLEF 24\n",
    "    class_names = sorted(os.listdir('/kaggle/input/birdclef-2024/train_audio'))\n",
    "    num_classes = len(class_names)\n",
    "    class_labels = list(range(num_classes))\n",
    "    label2name = dict(zip(class_labels, class_names))\n",
    "    name2label = {v:k for k,v in label2name.items()}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9eb9c32e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.606989Z",
     "iopub.status.busy": "2024-04-28T15:59:21.606511Z",
     "iopub.status.idle": "2024-04-28T15:59:21.611056Z",
     "shell.execute_reply": "2024-04-28T15:59:21.610169Z"
    },
    "papermill": {
     "duration": 0.011034,
     "end_time": "2024-04-28T15:59:21.612892",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.601858",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "BASE_PATH0 = '/kaggle/input/birdsong-recognition'\n",
    "BASE_PATH1 = '/kaggle/input/birdclef-2021'\n",
    "BASE_PATH2 = '/kaggle/input/birdclef-2022'\n",
    "BASE_PATH3 = '/kaggle/input/birdclef-2023'\n",
    "BASE_PATH4 = '/kaggle/input/xeno-canto-bird-recordings-extended-a-m'\n",
    "BASE_PATH5 = '/kaggle/input/xeno-canto-bird-recordings-extended-n-z'\n",
    "BASE_PATH6 = '/kaggle/input/birdclef-2024'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2f6302fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.621649Z",
     "iopub.status.busy": "2024-04-28T15:59:21.621372Z",
     "iopub.status.idle": "2024-04-28T15:59:21.882178Z",
     "shell.execute_reply": "2024-04-28T15:59:21.881454Z"
    },
    "papermill": {
     "duration": 0.267276,
     "end_time": "2024-04-28T15:59:21.883965",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.616689",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>filepath</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>/kaggle/input/birdclef-2024/unlabeled_soundsca...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            filepath\n",
       "0  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "1  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "2  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "3  /kaggle/input/birdclef-2024/unlabeled_soundsca...\n",
       "4  /kaggle/input/birdclef-2024/unlabeled_soundsca..."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_paths = glob(f'{BASE_PATH6}/test_soundscapes/*ogg')\n",
    "if len(test_paths) == 0:\n",
    "    test_paths = glob(f'{BASE_PATH6}/unlabeled_soundscapes/*ogg')[:10]\n",
    "test_df = pd.DataFrame(test_paths, columns = ['filepath'])\n",
    "test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ce4f1f44",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.893561Z",
     "iopub.status.busy": "2024-04-28T15:59:21.893237Z",
     "iopub.status.idle": "2024-04-28T15:59:21.902735Z",
     "shell.execute_reply": "2024-04-28T15:59:21.901856Z"
    },
    "papermill": {
     "duration": 0.016383,
     "end_time": "2024-04-28T15:59:21.904573",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.888190",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def load_audio(filepath):\n",
    "    audio, sr = librosa.load(filepath)\n",
    "    return audio, sr\n",
    "\n",
    "def get_spectrogram(audio):\n",
    "    spec = librosa.feature.melspectrogram(y=audio, \n",
    "                                   sr=CFG.sample_rate, \n",
    "                                   n_mels=256,\n",
    "                                   n_fft=2048,\n",
    "                                   hop_length=512,\n",
    "                                   fmax=CFG.fmax,\n",
    "                                   fmin=CFG.fmin,\n",
    "                                   )\n",
    "    spec = librosa.power_to_db(spec, ref=1.0)\n",
    "    min_ = spec.min()\n",
    "    max_ = spec.max()\n",
    "    if max_ != min_:\n",
    "        spec = (spec - min_)/(max_ - min_)\n",
    "    return spec\n",
    "\n",
    "def display_audio(row):\n",
    "    # Caption for viz\n",
    "    caption = f'Id: {row.filename} | Name: {row.common_name} | Sci.Name: {row.scientific_name} | Rating: {row.rating}'\n",
    "    # Read audio file\n",
    "    audio, sr = load_audio(row.filepath)\n",
    "    # Keep fixed length audio\n",
    "    audio = audio[:CFG.audio_len]\n",
    "    # Spectrogram from audio\n",
    "    spec = get_spectrogram(audio)\n",
    "    # Display audio\n",
    "    print(\"# Audio:\")\n",
    "    display(ipd.Audio(audio, rate=CFG.sample_rate))\n",
    "    print('# Visualization:')\n",
    "    fig, ax = plt.subplots(2, 1, figsize=(12, 2*3), sharex=True, tight_layout=True)\n",
    "    fig.suptitle(caption)\n",
    "    # Waveplot\n",
    "    lid.waveshow(audio,\n",
    "                 sr=CFG.sample_rate,\n",
    "                 ax=ax[0],\n",
    "                 color= cmap(0.1))\n",
    "    # Specplot\n",
    "    lid.specshow(spec, \n",
    "                 sr = CFG.sample_rate, \n",
    "                 hop_length=512,\n",
    "                 n_fft=2048,\n",
    "                 fmin=CFG.fmin,\n",
    "                 fmax=CFG.fmax,\n",
    "                 x_axis = 'time', \n",
    "                 y_axis = 'mel',\n",
    "                 cmap = 'coolwarm',\n",
    "                 ax=ax[1])\n",
    "    ax[0].set_xlabel('');\n",
    "    fig.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "793c32c8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.913973Z",
     "iopub.status.busy": "2024-04-28T15:59:21.913685Z",
     "iopub.status.idle": "2024-04-28T15:59:21.924721Z",
     "shell.execute_reply": "2024-04-28T15:59:21.924076Z"
    },
    "papermill": {
     "duration": 0.017755,
     "end_time": "2024-04-28T15:59:21.926476",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.908721",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def build_decoder(dim=1024):\n",
    "    def get_audio(path):\n",
    "        # Function that gets the audio \n",
    "        file_bytes = tf.io.read_file(path)\n",
    "        audio = tfio.audio.decode_vorbis(file_bytes)\n",
    "        audio = tf.cast(audio, tf.float32)\n",
    "        if tf.shape(audio)[1] > 1:\n",
    "            audio = audio[...,0:1]\n",
    "        audio = tf.squeeze(audio, axis=-1)\n",
    "        return audio\n",
    "    def create_frames(audio, duration=5, sr=32000):\n",
    "        frame_size = int(duration * sr)\n",
    "        audio = tf.pad(audio[..., None], [[0, tf.shape(audio)[0] % frame_size], [0,0]])\n",
    "        audio = tf.squeeze(audio)\n",
    "        frames = tf.reshape(audio, [-1, frame_size])\n",
    "\n",
    "        return frames\n",
    "    def apply_preproc(spec):\n",
    "        mean = tf.math.reduce_mean(spec)\n",
    "        std = tf.math.reduce_std(spec)\n",
    "        spec = tf.where(tf.math.equal(std, 0), spec - mean, (spec - mean)/std)\n",
    "\n",
    "        min_val = tf.math.reduce_min(spec)\n",
    "        max_val = tf.math.reduce_max(spec)\n",
    "        spec = tf.where(tf.math.equal(max_val - min_val, 0), spec - min_val, (spec - min_val)/(max_val-min_val))\n",
    "        return spec\n",
    "    \n",
    "    def decode(path):\n",
    "        audio = get_audio(path)\n",
    "        audio = create_frames(audio)\n",
    "        spec = keras.layers.MelSpectrogram(num_mel_bins = CFG.img_size[0],\n",
    "                                          fft_length = CFG.nfft,\n",
    "                                          sequence_stride = CFG.hop_length,\n",
    "                                          sampling_rate = CFG.sample_rate)(audio)\n",
    "        spec = apply_preproc(spec)\n",
    "        spec = tf.tile(spec[..., None], [1,1,1, 3])\n",
    "        return spec\n",
    "\n",
    "    return decode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3fd3906b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.935598Z",
     "iopub.status.busy": "2024-04-28T15:59:21.935343Z",
     "iopub.status.idle": "2024-04-28T15:59:21.940807Z",
     "shell.execute_reply": "2024-04-28T15:59:21.940059Z"
    },
    "papermill": {
     "duration": 0.012163,
     "end_time": "2024-04-28T15:59:21.942620",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.930457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def build_dataset(paths, batch_size = 1, decode_fn=None, cache=False):\n",
    "    if decode_fn is None:\n",
    "        decode_fn = build_decoder(dim = CFG.audio_len)\n",
    "\n",
    "    AUTO = tf.data.experimental.AUTOTUNE\n",
    "    slices = (paths, )\n",
    "    ds = tf.data.Dataset.from_tensor_slices(slices)\n",
    "    ds = ds.map(decode_fn, num_parallel_calls=AUTO)\n",
    "    ds = ds.cache() if cache else ds\n",
    "\n",
    "    ds = ds.batch(batch_size = batch_size, drop_remainder = True)\n",
    "    ds = ds.prefetch(AUTO)\n",
    "    return ds\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0da3a6f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:21.951730Z",
     "iopub.status.busy": "2024-04-28T15:59:21.951460Z",
     "iopub.status.idle": "2024-04-28T15:59:42.503755Z",
     "shell.execute_reply": "2024-04-28T15:59:42.502929Z"
    },
    "papermill": {
     "duration": 20.559332,
     "end_time": "2024-04-28T15:59:42.506027",
     "exception": false,
     "start_time": "2024-04-28T15:59:21.946695",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Attaching 'config.json' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\n",
      "Attaching 'config.json' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\n",
      "Attaching 'model.weights.h5' from model 'keras/efficientnetv2/keras/efficientnetv2_b2_imagenet/2' to your Kaggle notebook...\n"
     ]
    }
   ],
   "source": [
    "inp = keras.layers.Input(shape=(None, None, 3))\n",
    "backbone = keras_cv.models.EfficientNetV2Backbone.from_preset(CFG.preset)\n",
    "out = keras_cv.models.ImageClassifier(\n",
    "    backbone= backbone,\n",
    "    num_classes = CFG.num_classes,\n",
    "    name = 'classifier')(inp)\n",
    "model = keras.models.Model(inputs = inp, outputs = out)\n",
    "model.load_weights(\"/kaggle/input/baseline-model-birdclef-2024-train/best_model.weights.h5\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "53181f10",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T15:59:42.516730Z",
     "iopub.status.busy": "2024-04-28T15:59:42.516200Z",
     "iopub.status.idle": "2024-04-28T16:01:19.652769Z",
     "shell.execute_reply": "2024-04-28T16:01:19.651690Z"
    },
    "papermill": {
     "duration": 97.144348,
     "end_time": "2024-04-28T16:01:19.655103",
     "exception": false,
     "start_time": "2024-04-28T15:59:42.510755",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "test : 100%|██████████| 10/10 [01:35<00:00,  9.56s/it]\n"
     ]
    }
   ],
   "source": [
    "ids = []\n",
    "\n",
    "preds = np.empty(shape=(0, CFG.num_classes), dtype = 'float32')\n",
    "\n",
    "test_paths = test_df.filepath.tolist()\n",
    "test_ds = build_dataset(paths=test_paths, batch_size=1)\n",
    "\n",
    "for idx, specs in enumerate(tqdm(iter(test_ds), desc='test ', total=len(test_df))):\n",
    "    filename = test_paths[idx].split('/')[-1].replace('.ogg', '')\n",
    "    specs = keras.ops.convert_to_tensor(specs[0])\n",
    "    frame_preds = model.predict(specs, verbose = 0)\n",
    "    frame_ids = [f'{filename}_{(frame_id+1)*5}' for frame_id in range(len(frame_preds))]\n",
    "    \n",
    "    ids += frame_ids\n",
    "    \n",
    "    preds = np.concatenate([preds, frame_preds], axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f0478a3b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-04-28T16:01:19.667929Z",
     "iopub.status.busy": "2024-04-28T16:01:19.667087Z",
     "iopub.status.idle": "2024-04-28T16:01:19.896922Z",
     "shell.execute_reply": "2024-04-28T16:01:19.895933Z"
    },
    "papermill": {
     "duration": 0.238368,
     "end_time": "2024-04-28T16:01:19.899016",
     "exception": false,
     "start_time": "2024-04-28T16:01:19.660648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>asbfly</th>\n",
       "      <th>ashdro1</th>\n",
       "      <th>ashpri1</th>\n",
       "      <th>ashwoo2</th>\n",
       "      <th>asikoe2</th>\n",
       "      <th>asiope1</th>\n",
       "      <th>aspfly1</th>\n",
       "      <th>aspswi1</th>\n",
       "      <th>barfly1</th>\n",
       "      <th>...</th>\n",
       "      <th>whbwoo2</th>\n",
       "      <th>whcbar1</th>\n",
       "      <th>whiter2</th>\n",
       "      <th>whrmun</th>\n",
       "      <th>whtkin2</th>\n",
       "      <th>woosan</th>\n",
       "      <th>wynlau1</th>\n",
       "      <th>yebbab1</th>\n",
       "      <th>yebbul3</th>\n",
       "      <th>zitcis1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1872382287_5</td>\n",
       "      <td>0.004888</td>\n",
       "      <td>0.020012</td>\n",
       "      <td>0.000201</td>\n",
       "      <td>0.001296</td>\n",
       "      <td>0.005234</td>\n",
       "      <td>0.000784</td>\n",
       "      <td>0.011128</td>\n",
       "      <td>0.000390</td>\n",
       "      <td>0.000343</td>\n",
       "      <td>...</td>\n",
       "      <td>0.029768</td>\n",
       "      <td>0.000377</td>\n",
       "      <td>0.000417</td>\n",
       "      <td>0.002697</td>\n",
       "      <td>0.002955</td>\n",
       "      <td>0.001876</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.000160</td>\n",
       "      <td>0.004719</td>\n",
       "      <td>0.000262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1872382287_10</td>\n",
       "      <td>0.005062</td>\n",
       "      <td>0.008706</td>\n",
       "      <td>0.000233</td>\n",
       "      <td>0.000834</td>\n",
       "      <td>0.004713</td>\n",
       "      <td>0.001073</td>\n",
       "      <td>0.015683</td>\n",
       "      <td>0.000442</td>\n",
       "      <td>0.001653</td>\n",
       "      <td>...</td>\n",
       "      <td>0.040331</td>\n",
       "      <td>0.000631</td>\n",
       "      <td>0.001719</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>0.002510</td>\n",
       "      <td>0.001193</td>\n",
       "      <td>0.001563</td>\n",
       "      <td>0.000684</td>\n",
       "      <td>0.006140</td>\n",
       "      <td>0.000687</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1872382287_15</td>\n",
       "      <td>0.006374</td>\n",
       "      <td>0.037387</td>\n",
       "      <td>0.000162</td>\n",
       "      <td>0.000371</td>\n",
       "      <td>0.005338</td>\n",
       "      <td>0.000402</td>\n",
       "      <td>0.016170</td>\n",
       "      <td>0.000625</td>\n",
       "      <td>0.003979</td>\n",
       "      <td>...</td>\n",
       "      <td>0.005152</td>\n",
       "      <td>0.000914</td>\n",
       "      <td>0.001052</td>\n",
       "      <td>0.006211</td>\n",
       "      <td>0.001207</td>\n",
       "      <td>0.001299</td>\n",
       "      <td>0.001066</td>\n",
       "      <td>0.000874</td>\n",
       "      <td>0.003991</td>\n",
       "      <td>0.000307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1872382287_20</td>\n",
       "      <td>0.007376</td>\n",
       "      <td>0.008998</td>\n",
       "      <td>0.000251</td>\n",
       "      <td>0.000539</td>\n",
       "      <td>0.002617</td>\n",
       "      <td>0.001366</td>\n",
       "      <td>0.007882</td>\n",
       "      <td>0.000558</td>\n",
       "      <td>0.001933</td>\n",
       "      <td>...</td>\n",
       "      <td>0.034073</td>\n",
       "      <td>0.000645</td>\n",
       "      <td>0.001835</td>\n",
       "      <td>0.002367</td>\n",
       "      <td>0.001870</td>\n",
       "      <td>0.001112</td>\n",
       "      <td>0.001051</td>\n",
       "      <td>0.000590</td>\n",
       "      <td>0.003157</td>\n",
       "      <td>0.000512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1872382287_25</td>\n",
       "      <td>0.006283</td>\n",
       "      <td>0.002979</td>\n",
       "      <td>0.000208</td>\n",
       "      <td>0.000949</td>\n",
       "      <td>0.006196</td>\n",
       "      <td>0.001072</td>\n",
       "      <td>0.009079</td>\n",
       "      <td>0.000574</td>\n",
       "      <td>0.002480</td>\n",
       "      <td>...</td>\n",
       "      <td>0.021620</td>\n",
       "      <td>0.000807</td>\n",
       "      <td>0.001991</td>\n",
       "      <td>0.001684</td>\n",
       "      <td>0.002766</td>\n",
       "      <td>0.004483</td>\n",
       "      <td>0.000937</td>\n",
       "      <td>0.000766</td>\n",
       "      <td>0.003546</td>\n",
       "      <td>0.001083</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 183 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          row_id    asbfly   ashdro1   ashpri1   ashwoo2   asikoe2   asiope1  \\\n",
       "0   1872382287_5  0.004888  0.020012  0.000201  0.001296  0.005234  0.000784   \n",
       "1  1872382287_10  0.005062  0.008706  0.000233  0.000834  0.004713  0.001073   \n",
       "2  1872382287_15  0.006374  0.037387  0.000162  0.000371  0.005338  0.000402   \n",
       "3  1872382287_20  0.007376  0.008998  0.000251  0.000539  0.002617  0.001366   \n",
       "4  1872382287_25  0.006283  0.002979  0.000208  0.000949  0.006196  0.001072   \n",
       "\n",
       "    aspfly1   aspswi1   barfly1  ...   whbwoo2   whcbar1   whiter2    whrmun  \\\n",
       "0  0.011128  0.000390  0.000343  ...  0.029768  0.000377  0.000417  0.002697   \n",
       "1  0.015683  0.000442  0.001653  ...  0.040331  0.000631  0.001719  0.001140   \n",
       "2  0.016170  0.000625  0.003979  ...  0.005152  0.000914  0.001052  0.006211   \n",
       "3  0.007882  0.000558  0.001933  ...  0.034073  0.000645  0.001835  0.002367   \n",
       "4  0.009079  0.000574  0.002480  ...  0.021620  0.000807  0.001991  0.001684   \n",
       "\n",
       "    whtkin2    woosan   wynlau1   yebbab1   yebbul3   zitcis1  \n",
       "0  0.002955  0.001876  0.000365  0.000160  0.004719  0.000262  \n",
       "1  0.002510  0.001193  0.001563  0.000684  0.006140  0.000687  \n",
       "2  0.001207  0.001299  0.001066  0.000874  0.003991  0.000307  \n",
       "3  0.001870  0.001112  0.001051  0.000590  0.003157  0.000512  \n",
       "4  0.002766  0.004483  0.000937  0.000766  0.003546  0.001083  \n",
       "\n",
       "[5 rows x 183 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred_df = pd.DataFrame(ids, columns=['row_id'])\n",
    "pred_df.loc[:, CFG.class_names] = preds\n",
    "pred_df.to_csv('submission.csv', index=False)\n",
    "pred_df.head()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 8068726,
     "sourceId": 70203,
     "sourceType": "competition"
    },
    {
     "datasetId": 726237,
     "sourceId": 1487019,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 726312,
     "sourceId": 1487116,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 985270,
     "sourceId": 1664376,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3012199,
     "sourceId": 5181249,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 3020983,
     "sourceId": 5195317,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 174467364,
     "sourceType": "kernelVersion"
    },
    {
     "modelInstanceId": 4598,
     "sourceId": 6127,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30683,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 143.027026,
   "end_time": "2024-04-28T16:01:23.262032",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-04-28T15:59:00.235006",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
